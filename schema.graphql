type LiquidityPoolAggregator @entity {
  id: ID! # pool address
  chainId: Int! 
  name: String! # name of the pool
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  token0: Token!
  token1: Token!
  feeTier: BigInt!
  sqrtPrice: BigInt!
  tick: BigInt
  isStable: Boolean! # whether the pool is a stable AMM or a volatile AMM
  isCL: Boolean! # whether the pool is a CL pool
  reserve0: BigInt! @config(precision: 76) # reserve of token0 in token units
  reserve1: BigInt! @config(precision: 76) # reserve of token1 in token units
  totalLiquidityUSD: BigInt! @config(precision: 76) # total liquidity of the swap pool in USD
  totalVolume0: BigInt! @config(precision: 76) # total swap volume of token0 in token units
  totalVolume1: BigInt! @config(precision: 76) # total swap volume of token1 in token units
  totalVolumeUSD: BigInt! @config(precision: 76) # total swap volume of the pool in USD
  totalVolumeUSDWhitelisted: BigInt! @config(precision: 76) # total swap volume of the pool in USD
  gaugeFees0CurrentEpoch: BigInt! @config(precision: 76) # fees collected for current epoch in token0 units
  gaugeFees1CurrentEpoch: BigInt! @config(precision: 76) # fees collected for current epoch in token1 units
  totalFees0: BigInt! @config(precision: 76) # total fees collected in token0 units
  totalFees1: BigInt! @config(precision: 76) # total fees collected in token1 units
  totalFeesUSD: BigInt! @config(precision: 76) # total fees collected in USD
  totalFeesUSDWhitelisted: BigInt! @config(precision: 76) # total fees collected in USD
  numberOfSwaps: BigInt! @config(precision: 76) # total number of swaps in the pool
  token0Price: BigInt! @config(precision: 76) # price of token0 relative to token1
  token1Price: BigInt! @config(precision: 76) # price of token1 relative to token0
  totalVotesDeposited: BigInt! @config(precision: 76) # total votes for the pool
  totalVotesDepositedUSD: BigInt! @config(precision: 76) # total votes for the pool in USD
  totalEmissions: BigInt! @config(precision: 76) # total emissions for the pool in reward token units (VELO form Optimism and AERO for Base)
  totalEmissionsUSD: BigInt! @config(precision: 76) # total emissions for the pool in USD
  totalBribesUSD: BigInt! @config(precision: 76) # total bribes for the pool in USD
  gaugeIsAlive: Boolean! # whether the gauge is alive
  token0IsWhitelisted: Boolean! # whether the token0 is whitelisted
  token1IsWhitelisted: Boolean! # whether the token1 is whitelisted
  lastUpdatedTimestamp: Timestamp! # timestamp of last update
  lastSnapshotTimestamp: Timestamp! # timestamp of last snapshot

  # all time USD swapped, unfiltered for unreliable USD pools
  untrackedVolumeUSD: BigDecimal!
  # all time number of transactions
  txCount: BigInt!
  buyCount: BigInt!
  sellCount: BigInt!
  # total token 0 across all ticks
  totalValueLockedToken0: BigDecimal!
  # total token 1 across all ticks
  totalValueLockedToken1: BigDecimal!
  # tvl derived ETH
  totalValueLockedETH: BigDecimal!
  # tvl USD
  totalValueLockedUSD: BigDecimal!
  # TVL derived in USD untracked
  totalValueLockedUSDUntracked: BigDecimal!
  # Fields used to help derived relationship
  liquidityProviderCount: BigInt! # used to detect new exchanges
  # hourly snapshots of pool data
  poolHourData: [CLPool_HourData!]! @derivedFrom(field: "pool")
  # daily snapshots of pool data
  poolDayData: [CLPool_DayData!]! @derivedFrom(field: "pool")
  poolOneMinuteData: [CLPool_OneMinuteData!]! @derivedFrom(field: "pool")
  poolFiveMinuteData: [CLPool_FiveMinuteData!]! @derivedFrom(field: "pool")
  poolSixHourData: [CLPool_SixHourData!]! @derivedFrom(field: "pool")
  # derived fields
  mints: [CLPool_Mint!]! @derivedFrom(field: "pool")
  burns: [CLPool_Burn!]! @derivedFrom(field: "pool")
  swaps: [CLPool_Swap!]! @derivedFrom(field: "pool")
  collects: [CLPool_Collect!]! @derivedFrom(field: "pool")
  # ticks: [Tick!]! @derivedFrom(field: "pool")

  # Archive helpers for one minute data
  lastOneMinuteArchived: BigInt!
  lastOneMinuteRecorded: BigInt!
  oneMinuteArray: [Int!]!

  # Archive helpers for five minute data
  lastFiveMinuteArchived: BigInt!
  lastFiveMinuteRecorded: BigInt!
  fiveMinuteArray: [Int!]!
}

type Factory @entity {
  # factory address
  id: ID!
  # amount of pools created
  poolCount: BigInt!
  # amoutn of transactions all time
  txCount: BigInt!
  # total volume all time in derived USD
  totalVolumeUSD: BigDecimal!
  # total volume all time in derived ETH
  totalVolumeETH: BigDecimal!
  # total swap fees all time in USD
  totalFeesUSD: BigDecimal!
  # total swap fees all time in USD
  totalFeesETH: BigDecimal!
  # all volume even through less reliable USD values
  untrackedVolumeUSD: BigDecimal!
  # TVL derived in USD
  totalValueLockedUSD: BigDecimal!
  # TVL derived in ETH
  totalValueLockedETH: BigDecimal!
  # TVL derived in USD untracked
  totalValueLockedUSDUntracked: BigDecimal!
  # TVL derived in ETH untracked
  totalValueLockedETHUntracked: BigDecimal!

  # current owner of the factory
  owner: ID!
}

# Snapshot of the LiquidityPool entity
type LiquidityPoolAggregatorSnapshot {
  id: ID! # pool address
  chainId: Int! # chain id
  name: String! # name of the pool
  pool: String! # pool address
  token0_id: String! # token0 id
  token1_id: String! # token1 id
  token0_address: String! # token0 address
  token1_address: String! # token1 address
  isStable: Boolean! # whether the pool is a stable AMM or a volatile AMM
  isCL: Boolean!
  reserve0: BigInt! @config(precision: 76) # reserve of token0 in token units
  reserve1: BigInt! @config(precision: 76) # reserve of token1 in token units
  totalLiquidityUSD: BigInt! @config(precision: 76) # total liquidity of the swap pool in USD
  totalVolume0: BigInt! @config(precision: 76) # total swap volume of token0 in token units
  totalVolume1: BigInt! @config(precision: 76) # total swap volume of token1 in token units
  totalVolumeUSD: BigInt! @config(precision: 76) # total swap volume of the pool in USD
  totalVolumeUSDWhitelisted: BigInt! @config(precision: 76) # total swap volume of the pool in USD
  gaugeFees0CurrentEpoch: BigInt! @config(precision: 76) # fees collected for current epoch in token0 units
  gaugeFees1CurrentEpoch: BigInt! @config(precision: 76) # fees collected for current epoch in token1 units
  totalFees0: BigInt! @config(precision: 76) # total fees collected in token0 units
  totalFees1: BigInt! @config(precision: 76) # total fees collected in token1 units
  totalFeesUSD: BigInt! @config(precision: 76) # total fees collected in USD
  totalFeesUSDWhitelisted: BigInt! @config(precision: 76) # total fees collected in USD
  numberOfSwaps: BigInt! @config(precision: 76) # total number of swaps in the pool
  token0Price: BigInt! @config(precision: 76) # price of token0 relative to token1
  token1Price: BigInt! @config(precision: 76) # price of token1 relative to token0
  totalVotesDeposited: BigInt! @config(precision: 76) # total votes for the pool
  totalVotesDepositedUSD: BigInt! @config(precision: 76) # total votes for the pool in USD
  totalEmissions: BigInt! @config(precision: 76) # total emissions for the pool in reward token units (VELO form Optimism and AERO for Base)
  totalEmissionsUSD: BigInt! @config(precision: 76) # total emissions for the pool in USD
  totalBribesUSD: BigInt! @config(precision: 76) # total bribes for the pool in USD
  gaugeIsAlive: Boolean! # whether the gauge is alive
  token0IsWhitelisted: Boolean! # whether the token0 is whitelisted
  token1IsWhitelisted: Boolean! # whether the token1 is whitelisted
  timestamp: Timestamp! # timestamp of last update
}

# Entity for tracking a unique address in the `to` or `from` of a swap event
# Other liquidity pools don't count as users
type User {
  id: ID! # user address
  numberOfSwaps: BigInt! @config(precision: 76) # total number of swaps the user has made
  joined_at_timestamp: Timestamp! # timestamp of the user's first swap (or being swapped to), Not accurate if run in multihead unordered mode.
}

# Entity that tracks the latest state of the token entity
# By nature this entity saves the latest state of the token, and its state at different times should be attained from the snapshot entities
type Token @entity {
  id: ID! # token address
  address: String! @index # token address
  symbol: String! # token symbol
  name: String! # token name
  chainId: Int! @index
  decimals: BigInt! @config(precision: 76) # number of decimals
  pricePerUSDNew: BigInt! @config(precision: 76) # price of token per USD
  lastUpdatedTimestamp: Timestamp! # timestamp of last update
  isWhitelisted: Boolean! # whether the token is whitelisted

  # Total supply - ensure it's always a valid string
  totalSupply: BigInt! @config(precision: 76)
  # Volume metrics
  volume: BigInt! @config(precision: 76)
  volumeUSD: BigInt! @config(precision: 76)
  untrackedVolumeUSD: BigInt! @config(precision: 76)
  feesUSD: BigInt! @config(precision: 76)
  # Transaction counts
  txCount: BigInt! @config(precision: 76)
  buyCount: BigInt! @config(precision: 76)
  sellCount: BigInt! @config(precision: 76)
  # Pool participation
  poolCount: BigInt! @config(precision: 76)
  # Liquidity metrics
  totalValueLocked: BigInt! @config(precision: 76)
  totalValueLockedUSD: BigInt! @config(precision: 76)
  totalValueLockedUSDUntracked: BigInt! @config(precision: 76)
  derivedETH: BigInt! @config(precision: 76)

  # Archive helpers for one minute data
  lastOneMinuteArchived: BigInt!
  lastOneMinuteRecorded: BigInt!
  oneMinuteArray: [Int!]!

  # Archive helpers for five minute data
  lastFiveMinuteArchived: BigInt!
  lastFiveMinuteRecorded: BigInt!
  fiveMinuteArray: [Int!]!

  # pools token is in that are white listed for USD pricing
  # whitelistPools: [LiquidityPoolAggregator!]!
  # derived fields
  tokenDayData: [TokenDayData!]! @derivedFrom(field: "token")
  tokenHourData: [TokenHourData!]! @derivedFrom(field: "token")
  tokenOneMinuteData: [TokenOneMinuteData!]! @derivedFrom(field: "token")
  tokenFiveMinuteData: [TokenFiveMinuteData!]! @derivedFrom(field: "token")
  tokenSixHourData: [TokenSixHourData!]! @derivedFrom(field: "token")
 }

# stores for USD calculations
type Bundle @entity {
  id: ID!
  # price of ETH in usd
  ethPriceUSD: BigInt! @config(precision: 76)
}

# Snapshot of the Token entity
type TokenPriceSnapshot {
  id: ID! # Unique identifier for the record, could be a combination of token address and chain ID
  address: String! @index # Address of the token
  pricePerUSDNew: BigInt! @config(precision: 76) # price of token per USD
  chainId: Int!
  isWhitelisted: Boolean! # whether the token is whitelisted
  lastUpdatedTimestamp: Timestamp! @index # Timestamp of the last update
}

# Event for when a a concentrated liquidity pool is created
type CLFactory_PoolCreated {
  id: ID!
  token0: String!
  token1: String!
  tickSpacing: BigInt! @config(precision: 76)
  pool: String! @index
  poolFactory: String!
  timestamp: Timestamp!
  blockNumber: Int!
  transactionHash: String!
  logIndex: Int!
  chainId: Int!
}

# Event for when a gauge is notified of a reward
type CLGauge_NotifyReward {
  id: ID!
  from: String!
  amount: BigInt! @config(precision: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  blockNumber: Int!
  transactionHash: String!
  logIndex: Int!
  chainId: Int!
}

type CLGauge_Deposit {
  id: ID!
  tokenId: BigInt! @config(precision: 76)
  user: String!
  liquidityToStake: BigInt! @config(precision: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  blockNumber: Int!
  transactionHash: String!
  logIndex: Int!
  chainId: Int!
}

type CLGauge_Withdraw {
  id: ID!
  tokenId: BigInt! @config(precision: 76)
  user: String!
  liquidityToStake: BigInt! @config(precision: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  blockNumber: Int!
  transactionHash: String!
  logIndex: Int!
  chainId: Int!
}

# Event for when a gauge is notified of a reward
type Gauge_NotifyReward {
  id: ID!
  from: String!
  amount: BigInt! @config(precision: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  blockNumber: Int!
  transactionHash: String!
  logIndex: Int!
  chainId: Int!
}

type Gauge_Deposit {
  id: ID!
  from: String!
  amount: BigInt! @config(precision: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
  transactionHash: String!
}

type Gauge_Withdraw {
  id: ID!
  from: String!
  amount: BigInt! @config(precision: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  blockNumber: Int!
  transactionHash: String!
  logIndex: Int!
  chainId: Int!
}

# Event for when a voting reward is notified of a reward
type VotingReward_NotifyReward {
  id: ID!
  from: String!
  reward: String!
  epoch: BigInt! @config(precision: 76)
  pool: String!
  amount: BigInt! @config(precision: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  blockNumber: Int!
  transactionHash: String!
  logIndex: Int!
  chainId: Int!
}

type VotingReward_ClaimRewards {
  id: ID!
  from: String!
  reward: String!
  amount: BigInt! @config(precision: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  blockNumber: Int!
  transactionHash: String!
  logIndex: Int!
  chainId: Int!
}

# Event for when a swap occurs in a pool
type Pool_Swap {
  id: ID!
  sender: String!
  to: String!
  amount0In: BigInt! @config(precision: 76)
  amount1In: BigInt! @config(precision: 76)
  amount0Out: BigInt! @config(precision: 76)
  amount1Out: BigInt! @config(precision: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  blockNumber: Int!
  transactionHash: String!
  logIndex: Int!
  chainId: Int!
}

# Event for when a burn occurs in a pool
type Pool_Burn {
  id: ID!
  sourceAddress: String!
  sender: String!
  to: String!
  amount0: BigInt! @config(precision: 76)
  amount1: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  blockNumber: Int!
  transactionHash: String!
  logIndex: Int!
  chainId: Int!
}

type Pool_Mint {
  id: ID!
  sourceAddress: String!
  transactionHash: String!
  sender: String!
  amount0: BigInt! @config(precision: 76)
  amount1: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type Pool_Sync {
  id: ID!
  reserve0: BigInt! @config(precision: 76)
  reserve1: BigInt! @config(precision: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  blockNumber: Int!
  transactionHash: String!
  logIndex: Int!
  chainId: Int!
}

type Pool_Fees {
  id: ID!
  sender: String!
  amount0: BigInt! @config(precision: 76)
  amount1: BigInt! @config(precision: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  blockNumber: Int!
  transactionHash: String!
  logIndex: Int!
  chainId: Int!
}

type NFPM_Transfer {
  id: ID!
  from: String!
  to: String!
  tokenId: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type NFPM_IncreaseLiquidity {
  id: ID!
  tokenId: BigInt! @config(precision: 76)
  liquidity: BigInt! @config(precision: 76)
  amount0: BigInt! @config(precision: 76)
  amount1: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type NFPM_DecreaseLiquidity {
  id: ID!
  tokenId: BigInt! @config(precision: 76)
  liquidity: BigInt! @config(precision: 76)
  amount0: BigInt! @config(precision: 76)
  amount1: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type Voter {
  id: ID!
}

type VotingReward_Deposit {
  id: ID!
  from: String!
  tokenId: BigInt! @config(precision: 76)
  amount: BigInt! @config(precision: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type VotingReward_Withdraw {
  id: ID!
  from: String!
  tokenId: BigInt! @config(precision: 76)
  amount: BigInt! @config(precision: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type Voter_Voted {
  id: ID!
  sender: String!
  pool: String!
  tokenId: BigInt! @config(precision: 76)
  weight: BigInt! @config(precision: 76)
  totalWeight: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type Voter_DistributeReward {
  id: ID!
  sender: String!
  pool: String!
  gauge: String!
  amount: BigInt! @config(precision: 76)
  tokensDeposited: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type Voter_GaugeCreated {
  id: ID!
  poolFactory: String!
  votingRewardsFactory: String!
  gaugeFactory: String!
  pool: String!
  bribeVotingReward: String!
  feeVotingReward: String!
  gauge: String!
  creator: String!
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type Voter_GaugeKilled {
  id: ID!
  sender: String!
  gauge: String!
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type PoolFactory_SetCustomFee {
  id: ID!
  pool: String!
  fee: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type PoolFactory_PoolCreated {
  id: ID!
  poolFactory: String!
  token0: String!
  token1: String!
  stable: Boolean!
  pool: String! @index
  timestamp: Timestamp!
  blockNumber: Int!
  transactionHash: String!
  logIndex: Int!
  chainId: Int!
}

type CLPool_Burn {
  # transaction hash + "#" + index in burn Transaction array
  id: ID!
  transaction: Transaction!
  pool: LiquidityPoolAggregator!
  token0: Token!
  token1: Token!
  owner: String!
  tickLower: BigInt! @config(precision: 76)
  tickUpper: BigInt! @config(precision: 76)
  amount: BigInt! @config(precision: 76)
  amount0: BigInt! @config(precision: 76)
  amount1: BigInt! @config(precision: 76)
  sourceAddress: String! @index
  timestamp: Timestamp! @index
  # transactionHash: String!
  logIndex: Int!
}

type CLPool_Collect {
  id: ID!
  transaction: Transaction!
  pool: LiquidityPoolAggregator!
  owner: String!
  recipient: String!
  tickLower: BigInt! @config(precision: 76)
  tickUpper: BigInt! @config(precision: 76)
  amount0: BigInt! @config(precision: 76)
  amount1: BigInt! @config(precision: 76)
  sourceAddress: String! @index
  timestamp: Timestamp! @index
  # transactionHash: String!
  logIndex: Int!
}

type CLPool_CollectFees {
  id: ID!
  recipient: String!
  amount0: BigInt! @config(precision: 76)
  amount1: BigInt! @config(precision: 76)
  sourceAddress: String! @index
  timestamp: Timestamp! @index
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
}

type CLPool_Flash {
  id: ID!
  transaction: Transaction!
  pool: LiquidityPoolAggregator!
  sender: String!
  recipient: String!
  amount0: BigInt! @config(precision: 76)
  amount1: BigInt! @config(precision: 76)
  paid0: BigInt! @config(precision: 76)
  paid1: BigInt! @config(precision: 76)
  sourceAddress: String! @index
  timestamp: Timestamp! @index
  # transactionHash: String!
  logIndex: Int!
}

type CLPool_IncreaseObservationCardinalityNext {
  id: ID!
  observationCardinalityNextOld: BigInt! @config(precision: 76)
  observationCardinalityNextNew: BigInt! @config(precision: 76)
  sourceAddress: String! @index
  timestamp: Timestamp! @index
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  # chainId: Int!
}

type CLPool_Initialize {
  id: ID!
  sqrtPriceX96: BigInt! @config(precision: 76)
  tick: BigInt! @config(precision: 76)
  sourceAddress: String! @index
  timestamp: Timestamp! @index
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  # chainId: Int!
}

type CLPool_Mint {
  id: ID!
  transaction: Transaction!
  pool: LiquidityPoolAggregator!
  token0: Token!
  token1: Token!
  sender: String!
  owner: String!
  tickLower: BigInt! @config(precision: 76)
  tickUpper: BigInt! @config(precision: 76)
  amount: BigInt! @config(precision: 76)
  amount0: BigInt! @config(precision: 76)
  amount1: BigInt! @config(precision: 76)
  sourceAddress: String! @index
  timestamp: Timestamp! @index
  logIndex: Int!
}

type CLPool_SetFeeProtocol {
  id: ID!
  feeProtocol0Old: BigInt! @config(precision: 76)
  feeProtocol1Old: BigInt! @config(precision: 76)
  feeProtocol0New: BigInt! @config(precision: 76)
  feeProtocol1New: BigInt! @config(precision: 76)
  sourceAddress: String! @index
  timestamp: Timestamp! @index
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  # chainId: Int!
}

type CLPool_Swap {
  # transaction hash + "#" + index in swaps Transaction array
  id: ID!
  sender: String!
  recipient: String!
  transaction: Transaction!
  pool: LiquidityPoolAggregator!
  token0: Token!
  token1: Token!
  amount0: BigInt! @config(precision: 76)
  amount1: BigInt! @config(precision: 76)
  sqrtPriceX96: BigInt! @config(precision: 76)
  liquidity: BigInt! @config(precision: 76)
  tick: BigInt! @config(precision: 76)
  sourceAddress: String! @index # Origin of the swap
  timestamp: Timestamp! @index
  # transactionHash: String!
  logIndex: Int!
}


type Voter_WhitelistToken {
  id: ID!
  whitelister: String!
  token: String!
  isWhitelisted: Boolean!
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type SuperchainCLFactory_RootPoolCreated {
  id: ID!
  token0: String!
  token1: String!
  tickSpacing: BigInt! @config(precision: 76)
  pool: String! @index
  poolFactory: String!
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  poolChainId: Int!
  chainId: Int!
}

type SuperchainPoolFactory_RootPoolCreated {
  id: ID!
  token0: String!
  token1: String!
  stable: Boolean!
  pool: String! @index
  poolFactory: String!
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  poolChainId: Int!
  chainId: Int!
  length: BigInt! @config(precision: 76)
}

type VeNFTAggregator {
  id: ID!
  chainId: Int!
  tokenId: BigInt! @config(precision: 76)
  owner: String!
  locktime: BigInt! @config(precision: 76)
  lastUpdatedTimestamp: Timestamp!
  totalValueLocked: BigInt! @config(precision: 76)
  isAlive: Boolean!
}

type VeNFT_Deposit {
  id: ID!
  provider: String!
  tokenId: BigInt! @config(precision: 76)
  depositType: BigInt! @config(precision: 76)
  value: BigInt! @config(precision: 76)
  locktime: BigInt! @config(precision: 76)
  ts: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type VeNFT_Withdraw {
  id: ID!
  provider: String!
  tokenId: BigInt! @config(precision: 76)
  value: BigInt! @config(precision: 76)
  ts: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type VeNFT_Transfer {
  id: ID!
  from: String!
  to: String!
  tokenId: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type ALMCore_Rebalance {
  id: ID!
  pool: String!
  tickLower: BigInt! @config(precision: 76)
  tickUpper: BigInt! @config(precision: 76)
  sqrtPriceX96: BigInt! @config(precision: 76)
  amount0: BigInt! @config(precision: 76)
  amount1: BigInt! @config(precision: 76)
  ammPositionIdBefore: BigInt! @config(precision: 76)
  ammPositionIdAfter: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  chainId: Int!
  blockNumber: Int!
  logIndex: Int!
}

type ALMCore_Rebalance_AmmPosition {
  id: ID!
  pool: String!
  token0: String!
  token1: String!
  property: BigInt! @config(precision: 24)
  tickLower: BigInt! @config(precision: 24)
  tickUpper: BigInt! @config(precision: 24)
  liquidity: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  chainId: Int!
  blockNumber: Int!
  logIndex: Int!
}

type ALMDeployFactory_StrategyCreated {
  id: ID!
  pool: String!
  lpWrapper: String!
  strategyType: BigInt! @config(precision: 8)
  tickNeighborhood: BigInt! @config(precision: 24)
  tickSpacing: BigInt! @config(precision: 24)
  width: BigInt! @config(precision: 24)
  maxLiquidityRatioDeviationX96: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  chainId: Int!
  blockNumber: Int!
  logIndex: Int!
}

type ALMDeployFactory_StrategyCreated_AmmPosition {
  id: ID!
  pool: String!
  lpWrapper: String!
  token0: String!
  token1: String!
  property: BigInt! @config(precision: 24)
  tickLower: BigInt! @config(precision: 24)
  tickUpper: BigInt! @config(precision: 24)
  liquidity: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  chainId: Int!
  blockNumber: Int!
  logIndex: Int!
}

type ALMLPWrapper_Deposit {
  id: ID!
  sender: String!
  recipient: String!
  pool: String!
  amount0: BigInt! @config(precision: 76)
  amount1: BigInt! @config(precision: 76)
  lpAmount: BigInt! @config(precision: 76)
  totalSupply: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  chainId: Int!
  blockNumber: Int!
  logIndex: Int!
}

type ALMLPWrapper_Withdraw {
  id: ID!
  sender: String!
  recipient: String!
  pool: String!
  amount0: BigInt! @config(precision: 76)
  amount1: BigInt! @config(precision: 76)
  lpAmount: BigInt! @config(precision: 76)
  totalSupply: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  chainId: Int!
  blockNumber: Int!
  logIndex: Int!
}

type ALMLPWrapper_Transfer {
  id: ID!
  from: String!
  to: String!
  value: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  chainId: Int!
  blockNumber: Int!
  logIndex: Int!
}

type ALMLPWrapper_TotalSupplyLimitUpdated {
  id: ID!
  newTotalSupplyLimit: BigInt! @config(precision: 76)
  totalSupplyLimitOld: BigInt! @config(precision: 76)
  totalSupplyCurrent: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  chainId: Int!
  blockNumber: Int!
  logIndex: Int!
}

type ERC20_Transfer {
  id: ID!
  from: String!
  to: String!
  value: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  chainId: Int!
  blockNumber: Int!
  logIndex: Int!
  transactionHash: String!
}

type Dynamic_Fee_Swap_Module {
  id: ID!
  pool: String!
  baseFee: BigInt! @config(precision: 76)
  feeCap: BigInt! @config(precision: 76)
  scalingFactor: BigInt! @config(precision: 76)
  currentFee: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  chainId: Int!
  blockNumber: Int!
}

type FactoryRegistry_Approve {
  id: ID!
  poolFactory: String!
  votingRewardsFactory: String!
  gaugeFactory: String!
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type FactoryRegistry_Unapprove {
  id: ID!
  poolFactory: String!
  votingRewardsFactory: String!
  gaugeFactory: String!
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type DynamicFeeSwapModule_CustomFeeSet {
  id: ID!
  chainId: Int!
  pool: String!
  fee: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
}

type DynamicFeeSwapModule_SecondsAgoSet {
  id: ID!
  chainId: Int!
  secondsAgo: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
}

type DynamicFeeSwapModule_ScalingFactorSet {
  id: ID!
  chainId: Int!
  pool: String!
  scalingFactor: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
}

type DynamicFeeSwapModule_FeeCapSet {
  id: ID!
  chainId: Int!
  pool: String!
  feeCap: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
}

type CLGauge_ClaimRewards {
  id: ID!
  from: String!
  amount: BigInt! @config(precision: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  blockNumber: Int!
  transactionHash: String!
  logIndex: Int!
  chainId: Int!
}

type Transaction @entity {
  # txn hash
  id: ID!
  # block txn was included in
  blockNumber: BigInt!
  # timestamp txn was confirmed
  timestamp: BigInt!
  # gas used during txn execution
  gasUsed: BigInt!
  gasPrice: BigInt!
  # derived values
  mints: [CLPool_Mint!]! @derivedFrom(field: "transaction")
  burns: [CLPool_Burn!]! @derivedFrom(field: "transaction")
  swaps: [CLPool_Swap!]! @derivedFrom(field: "transaction")
  collects: [CLPool_Collect!]! @derivedFrom(field: "transaction")
  flashs: [CLPool_Flash!]! @derivedFrom(field: "transaction")
  # initialize: [CLPool_Initialize]! @derivedFrom(field: "transaction")
}

type ProtocolDayData @entity {
  # timestamp rounded to current day by dividing by 86400
  id: ID!
  # timestamp rounded to current day by dividing by 86400
  date: Int!
  # total daily volume in protocol derived in terms of ETH
  volumeETH: BigInt! @config(precision: 76)
  # total daily volume in protocol derived in terms of USD
  volumeUSD: BigInt! @config(precision: 76)
  # total daily volume in protocol derived in terms of USD untracked
  volumeUSDUntracked: BigInt! @config(precision: 76)
  # fees in USD
  feesUSD: BigInt! @config(precision: 76)
  # number of daily transactions
  txCount: BigInt! @config(precision: 76)
  # tvl in terms of USD
  tvlUSD: BigInt! @config(precision: 76)
}

type CLPool_DayData @entity {
  # timestamp rounded to current day by dividing by 86400
  id: ID!
  # timestamp rounded to current day by dividing by 86400
  date: Int!
  # pointer to pool
  pool: String!
  # in range liquidity at end of period
  liquidity: BigInt! @config(precision: 76)
  # current price tracker at end of period
  sqrtPrice: BigInt! @config(precision: 76)
  # price of token0 - derived from sqrtPrice
  token0Price: BigInt! @config(precision: 76)
  # price of token1 - derived from sqrtPrice
  token1Price: BigInt! @config(precision: 76)
  # current tick at end of period
  tick: BigInt @config(precision: 76)
  # tvl derived in USD at end of period
  tvlUSD: BigInt! @config(precision: 76)
  # volume in token0
  volumeToken0: BigInt! @config(precision: 76)
  # volume in token1
  volumeToken1: BigInt! @config(precision: 76)
  # volume in USD
  volumeUSD: BigInt! @config(precision: 76)
  # fees in USD
  feesUSD: BigInt! @config(precision: 76)
  # number of transactions during period
  txCount: BigInt! @config(precision: 76)
  buyCount: BigInt! @config(precision: 76)
  sellCount: BigInt! @config(precision: 76)
  # opening price of token0
  openPrice: BigInt! @config(precision: 76)
  # high price of token0
  high: BigInt! @config(precision: 76)
  # low price of token0
  low: BigInt! @config(precision: 76)
  # close price of token0
  close: BigInt! @config(precision: 76)
}

# hourly stats tracker for pool
type CLPool_HourData @entity {
  # format: <pool address>-<timestamp>
  id: ID!
  # unix timestamp for start of hour
  periodStartUnix: Int!
  # pointer to pool
  pool: String!
  # in range liquidity at end of period
  liquidity: BigInt! @config(precision: 76)
  # current price tracker at end of period
  sqrtPrice: BigInt! @config(precision: 76)
  # price of token0 - derived from sqrtPrice
  token0Price: BigInt! @config(precision: 76)
  # price of token1 - derived from sqrtPrice
  token1Price: BigInt! @config(precision: 76)
  # current tick at end of period
  tick: BigInt @config(precision: 76)
  # tvl derived in USD at end of period
  tvlUSD: BigInt! @config(precision: 76)
  # volume in token0
  volumeToken0: BigInt! @config(precision: 76)
  # volume in token1
  volumeToken1: BigInt! @config(precision: 76)
  # volume in USD
  volumeUSD: BigInt! @config(precision: 76)
  # fees in USD
  feesUSD: BigInt! @config(precision: 76)
  # number of transactions during period
  txCount: BigInt! @config(precision: 76)
  buyCount: BigInt! @config(precision: 76)
  sellCount: BigInt! @config(precision: 76)
  # opening price of token0
  openPrice: BigInt! @config(precision: 76)
  # high price of token0
  high: BigInt! @config(precision: 76)
  # low price of token0
  low: BigInt! @config(precision: 76)
  # close price of token0
  close: BigInt! @config(precision: 76)
}

type CLPool_OneMinuteData @entity {
  # format: <pool address>-<timestamp>
  id: ID!
  # unix timestamp for start of minute
  periodStartUnix: Int!
  # pointer to pool
  pool: String!
  # in range liquidity at end of period
  liquidity: BigInt! @config(precision: 76)
  # current price tracker at end of period
  sqrtPrice: BigInt! @config(precision: 76)
  # price of token0 - derived from sqrtPrice
  token0Price: BigInt! @config(precision: 76)
  # price of token1 - derived from sqrtPrice
  token1Price: BigInt! @config(precision: 76)
  # current tick at end of period
  tick: BigInt @config(precision: 76)
  # tvl derived in USD at end of period
  tvlUSD: BigInt! @config(precision: 76)
  # volume in token0
  volumeToken0: BigInt! @config(precision: 76)
  # volume in token1
  volumeToken1: BigInt! @config(precision: 76)
  # volume in USD
  volumeUSD: BigInt! @config(precision: 76)
  # fees in USD
  feesUSD: BigInt! @config(precision: 76)
  # number of transactions during period
  txCount: BigInt! @config(precision: 76)
  buyCount: BigInt! @config(precision: 76)
  sellCount: BigInt! @config(precision: 76)
  # opening price of token0
  openPrice: BigInt! @config(precision: 76)
  # high price of token0
  high: BigInt! @config(precision: 76)
  # low price of token0
  low: BigInt! @config(precision: 76)
  # close price of token0
  close: BigInt! @config(precision: 76)
}

type CLPool_FiveMinuteData @entity {
  # format: <pool address>-<timestamp>
  id: ID!
  # unix timestamp for start of five minutes
  periodStartUnix: Int!
  # pointer to pool
  pool: String!
  # in range liquidity at end of period
  liquidity: BigInt! @config(precision: 76)
  # current price tracker at end of period
  sqrtPrice: BigInt! @config(precision: 76)
  # price of token0 - derived from sqrtPrice
  token0Price: BigInt! @config(precision: 76)
  # price of token1 - derived from sqrtPrice
  token1Price: BigInt! @config(precision: 76)
  # current tick at end of period
  tick: BigInt @config(precision: 76)
  # tvl derived in USD at end of period
  tvlUSD: BigInt! @config(precision: 76)
  # volume in token0
  volumeToken0: BigInt! @config(precision: 76)
  # volume in token1
  volumeToken1: BigInt! @config(precision: 76)
  # volume in USD
  volumeUSD: BigInt! @config(precision: 76)
  # fees in USD
  feesUSD: BigInt! @config(precision: 76)
  # number of transactions during period
  txCount: BigInt! @config(precision: 76)
  buyCount: BigInt! @config(precision: 76)
  sellCount: BigInt! @config(precision: 76)
  # opening price of token0
  openPrice: BigInt! @config(precision: 76)
  # high price of token0
  high: BigInt! @config(precision: 76)
  # low price of token0
  low: BigInt! @config(precision: 76)
  # close price of token0
  close: BigInt! @config(precision: 76)
}

type CLPool_SixHourData @entity {
  # format: <pool address>-<timestamp>
  id: ID!
  # unix timestamp for start of six hours
  periodStartUnix: Int!
  # pointer to pool
  pool: String!
  # in range liquidity at end of period
  liquidity: BigInt! @config(precision: 76)
  # current price tracker at end of period
  sqrtPrice: BigInt! @config(precision: 76)
  # price of token0 - derived from sqrtPrice
  token0Price: BigInt! @config(precision: 76)
  # price of token1 - derived from sqrtPrice
  token1Price: BigInt! @config(precision: 76)
  # current tick at end of period
  tick: BigInt @config(precision: 76)
  # tvl derived in USD at end of period
  tvlUSD: BigInt! @config(precision: 76)
  # volume in token0
  volumeToken0: BigInt! @config(precision: 76)
  # volume in token1
  volumeToken1: BigInt! @config(precision: 76)
  # volume in USD
  volumeUSD: BigInt! @config(precision: 76)
  # fees in USD
  feesUSD: BigInt! @config(precision: 76)
  # number of transactions during period
  txCount: BigInt! @config(precision: 76)
  buyCount: BigInt! @config(precision: 76)
  sellCount: BigInt! @config(precision: 76)
  # opening price of token0
  openPrice: BigInt! @config(precision: 76)
  # high price of token0
  high: BigInt! @config(precision: 76)
  # low price of token0
  low: BigInt! @config(precision: 76)
  # close price of token0
  close: BigInt! @config(precision: 76)
}

type TokenDayData @entity {
  # token address concatenated with date
  id: ID!
  # timestamp rounded to current day by dividing by 86400
  date: Int!
  # pointer to token
  token: String!
  # volume in token units
  volume: BigInt! @config(precision: 76)
  # volume in derived USD
  volumeUSD: BigInt! @config(precision: 76)
  # volume in USD even on pools with less reliable USD values
  untrackedVolumeUSD: BigInt! @config(precision: 76)
  # liquidity across all pools in token units
  totalValueLocked: BigInt! @config(precision: 76)
  # liquidity across all pools in derived USD
  totalValueLockedUSD: BigInt! @config(precision: 76)
  # price at end of period in USD
  priceUSD: BigInt! @config(precision: 76)
  # fees in USD
  feesUSD: BigInt! @config(precision: 76)
  # opening price USD
  openPrice: BigInt! @config(precision: 76)
  # high price USD
  high: BigInt! @config(precision: 76)
  # low price USD
  low: BigInt! @config(precision: 76)
  # close price USD
  close: BigInt! @config(precision: 76)
  # number of transactions during period
  txCount: BigInt! @config(precision: 76)
  buyCount: BigInt! @config(precision: 76)
  sellCount: BigInt! @config(precision: 76)
}

type TokenHourData @entity {
  # token address concatenated with date
  id: ID!
  # unix timestamp for start of hour
  periodStartUnix: Int!
  # pointer to token
  token: String!
  # volume in token units
  volume: BigInt! @config(precision: 76)
  # volume in derived USD
  volumeUSD: BigInt! @config(precision: 76)
  # volume in USD even on pools with less reliable USD values
  untrackedVolumeUSD: BigInt! @config(precision: 76)
  # liquidity across all pools in token units
  totalValueLocked: BigInt! @config(precision: 76)
  # liquidity across all pools in derived USD
  totalValueLockedUSD: BigInt! @config(precision: 76)
  # price at end of period in USD
  priceUSD: BigInt! @config(precision: 76)
  # fees in USD
  feesUSD: BigInt! @config(precision: 76)
  # opening price USD
  openPrice: BigInt! @config(precision: 76)
  # high price USD
  high: BigInt! @config(precision: 76)
  # low price USD
  low: BigInt! @config(precision: 76)
  # close price USD
  close: BigInt! @config(precision: 76)
  # number of transactions during period
  txCount: BigInt! @config(precision: 76)
  buyCount: BigInt! @config(precision: 76)
  sellCount: BigInt! @config(precision: 76)
}

type TokenOneMinuteData @entity {
  # token address concatenated with date
  id: ID!
  # unix timestamp for start of minute
  periodStartUnix: Int!
  # pointer to token
  token: String!
  # volume in token units
  volume: BigInt! @config(precision: 76)
  # volume in derived USD
  volumeUSD: BigInt! @config(precision: 76)
  # volume in USD even on pools with less reliable USD values
  untrackedVolumeUSD: BigInt! @config(precision: 76)
  # liquidity across all pools in token units
  totalValueLocked: BigInt! @config(precision: 76)
  # liquidity across all pools in derived USD
  totalValueLockedUSD: BigInt! @config(precision: 76)
  # price at end of period in USD
  priceUSD: BigInt! @config(precision: 76)
  # fees in USD
  feesUSD: BigInt! @config(precision: 76)
  # opening price USD
  openPrice: BigInt! @config(precision: 76)
  # high price USD
  high: BigInt! @config(precision: 76)
  # low price USD
  low: BigInt! @config(precision: 76)
  # close price USD
  close: BigInt! @config(precision: 76)
  # number of transactions during period
  txCount: BigInt! @config(precision: 76)
  buyCount: BigInt! @config(precision: 76)
  sellCount: BigInt! @config(precision: 76)
}

type TokenFiveMinuteData @entity {
  # token address concatenated with date
  id: ID!
  # unix timestamp for start of five minutes
  periodStartUnix: Int!
  # pointer to token
  token: String!
  # volume in token units
  volume: BigInt! @config(precision: 76)
  # volume in derived USD
  volumeUSD: BigInt! @config(precision: 76)
  # volume in USD even on pools with less reliable USD values
  untrackedVolumeUSD: BigInt! @config(precision: 76)
  # liquidity across all pools in token units
  totalValueLocked: BigInt! @config(precision: 76)
  # liquidity across all pools in derived USD
  totalValueLockedUSD: BigInt! @config(precision: 76)
  # price at end of period in USD
  priceUSD: BigInt! @config(precision: 76)
  # fees in USD
  feesUSD: BigInt! @config(precision: 76)
  # opening price USD
  openPrice: BigInt! @config(precision: 76)
  # high price USD
  high: BigInt! @config(precision: 76)
  # low price USD
  low: BigInt! @config(precision: 76)
  # close price USD
  close: BigInt! @config(precision: 76)
  # number of transactions during period
  txCount: BigInt! @config(precision: 76)
  buyCount: BigInt! @config(precision: 76)
  sellCount: BigInt! @config(precision: 76)
}

type TokenSixHourData @entity {
  # token address concatenated with date
  id: ID!
  # unix timestamp for start of six hours
  periodStartUnix: Int!
  # pointer to token
  token: String!
  # volume in token units
  volume: BigInt! @config(precision: 76)
  # volume in derived USD
  volumeUSD: BigInt! @config(precision: 76)
  # volume in USD even on pools with less reliable USD values
  untrackedVolumeUSD: BigInt! @config(precision: 76)
  # liquidity across all pools in token units
  totalValueLocked: BigInt! @config(precision: 76)
  # liquidity across all pools in derived USD
  totalValueLockedUSD: BigInt! @config(precision: 76)
  # price at end of period in USD
  priceUSD: BigInt! @config(precision: 76)
  # fees in USD
  feesUSD: BigInt! @config(precision: 76)
  # opening price USD
  openPrice: BigInt! @config(precision: 76)
  # high price USD
  high: BigInt! @config(precision: 76)
  # low price USD
  low: BigInt! @config(precision: 76)
  # close price USD
  close: BigInt! @config(precision: 76)
  # number of transactions during period
  txCount: BigInt! @config(precision: 76)
  buyCount: BigInt! @config(precision: 76)
  sellCount: BigInt! @config(precision: 76)
}

type TokenTraderActivity @entity {
  # format: <token address>-<trader address>
  id: ID!
  # trader address
  trader: String!
  # token being traded
  token: String!
  # total value in USD of tokens bought
  boughtUSD: BigInt! @config(precision: 76)
  # total amount of tokens bought
  boughtTokenAmount: BigInt! @config(precision: 76)
  # total value in USD of tokens sold
  soldUSD: BigInt! @config(precision: 76)
  # total amount of tokens sold
  soldTokenAmount: BigInt! @config(precision: 76)
  # profit/loss in USD (soldUSD - boughtUSD)
  pnlUSD: BigInt! @config(precision: 76)
  # profit/loss percentage ((soldUSD - boughtUSD) / boughtUSD * 100)
  pnlPercent: BigInt! @config(precision: 76)
  # time of first transaction with this token
  firstTxTimestamp: BigInt! @config(precision: 76)
  # time of last transaction with this token
  lastTxTimestamp: BigInt! @config(precision: 76)
  # holding duration in seconds (lastTxTimestamp - firstTxTimestamp)
  holdingDurationSeconds: BigInt! @config(precision: 76)
  # average price at which token was bought (boughtUSD / boughtTokenAmount)
  avgPriceBought: BigInt! @config(precision: 76)
  # average price at which token was sold (soldUSD / soldTokenAmount)
  avgPriceSold: BigInt! @config(precision: 76)
  # number of buy transactions
  buyCount: BigInt! @config(precision: 76)
  # number of sell transactions
  sellCount: BigInt! @config(precision: 76)
  # total number of transactions
  txCount: BigInt! @config(precision: 76)
}
